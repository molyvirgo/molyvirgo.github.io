async function:{

    var resolveAfter2Seconds = function() {
        console.log("starting slow promise");
        return new Promise(resolve => {
            setTimeout(function() {
            resolve("slow");
            console.log("slow promise is done");
            }, 2000);
        });
    };

    var resolveAfter1Second = function() {
        console.log("starting fast promise");
        return new Promise(resolve => {
            setTimeout(function() {
            resolve("fast");
            console.log("fast promise is done");
            }, 1000);
        });
    };

    var sequentialStart = async function() {
        console.log('==SEQUENTIAL START==');

        // 1. Execution gets here almost instantly
        const slow = await resolveAfter2Seconds();
        console.log(slow); // 2. this runs 2 seconds after 1.

        const fast = await resolveAfter1Second();
        console.log(fast); // 3. this runs 3 seconds after 1.
    }
    sequentialStart():{
        > "==SEQUENTIAL START=="
        > "starting slow promise"
        > "slow promise is done"
        > "slow"
        > "starting fast promise"
        > "fast promise is done"
        > "fast"
        [执行 await function 会阻塞 funciton ]
    }
    var concurrentStart = async function() {
        console.log('==CONCURRENT START with await==');
        const slow = resolveAfter2Seconds(); // starts timer immediately
        const fast = resolveAfter1Second(); // starts timer immediately

        console.log(1)
        console.log(slow)
        console.log(fast)
        // 1. Execution gets here almost instantly
        console.log(await slow); // 2. this runs 2 seconds after 1.
        console.log(await fast); // 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved
    }
    concurrentStart(){
        > "==CONCURRENT START with await=="
        > "starting slow promise"
        > "starting fast promise"
        > 1
        > [object Promise]
        > [object Promise]
        > "fast promise is done"
        > "slow promise is done"
        > "slow"
        > "fast"
        [ 不加 await 则返回的是 Promise对象 await用于保证 Promise对象 在 async funciton 中 完整执行]
    }
    var concurrentPromise = function() {
        console.log('==CONCURRENT START with Promise.all==');
        return Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) => {
            console.log(messages[0]); // slow
            console.log(messages[1]); // fast
        });
    }
    concurrentPromise():{
        > "==CONCURRENT START with Promise.all=="
        > "starting slow promise"
        > "starting fast promise"
        > "fast promise is done"
        > "slow promise is done"
        > "slow"
        > "fast"
        [Promise.all 保证所有 async funciton 都完整执行，并按调用顺序 保存 async funciton result]
    }
    var parallel = async function() {
        console.log('==PARALLEL with await Promise.all==');
        
        // Start 2 "jobs" in parallel and wait for both of them to complete
        await Promise.all([
            (async()=>console.log(await resolveAfter2Seconds()))(),
            (async()=>console.log(await resolveAfter1Second()))()
        ]);
    }
    parallel():{
        > "==PARALLEL with await Promise.all=="
        > "starting slow promise"
        > "starting fast promise"
        > "fast promise is done"
        > "fast"
        > "slow promise is done"
        > "slow"
        []
    }
    var parallelPromise = function() {
        console.log('==PARALLEL with Promise.then==');
        resolveAfter2Seconds().then((message)=>console.log(message));
        console.log(1)
        resolveAfter1Second().then((message)=>console.log(message));
    }
    parallelPromise():{
        > "==PARALLEL with Promise.then=="
        > "starting slow promise"
        > 1
        > "starting fast promise"
        > "fast promise is done"
        > "fast"
        > "slow promise is done"
        > "slow"
    }
}
async & await VS Promise{

    function getProcessedDataUsePromise(url) {
        return downloadData(url) // returns a promise
            .catch(e => {
                return downloadFallbackData(url) // returns a promise
            })
            .then(v => {
                return processDataInWorker(v) // returns a promise
            });
    }
    async function getProcessedDataUseAsyncawait(url) {
        let v;
        try{
            v= await downloadData(url)
          
        }catch(e){
            return downloadFallbackData(url)
        }
          return processDataInWorker(v) 
    }

    function downloadData(url){
        return new Promise(resolve => {
            setTimeout(function() {
                resolve("downloadData")
                console.log("downloadData promise is done")
            }, 2000)
        });
    }
    function downloadFallbackData(url){
        return new Promise(resolve => {
            setTimeout(function() {
                resolve("downloadFallbackData")
                console.log("downloadFallbackData promise is done")
            }, 2000)
        });
    }
    function processDataInWorker(result){
        return new Promise(resolve => {
            setTimeout(function() {
                resolve("downloadFallbackData")
                console.log(`processDataInWorker is done  result = ${result}`)
            }, 2000)
        })
    }


    [ await 用于 保证 Promise 完整执行, 使用 await 的函数 必须 add async ]
    [await&async 可以和 Promise 互换]
}

